AppType=JavaFX
Build1=Default,b4j.example
Group=Default Group
Library1=jcore
Library2=jfx
Library3=banano
Library4=bananofirestore
NumberOfFiles=0
NumberOfLibraries=4
NumberOfModules=0
Version=8.5
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
	'#IgnoreWarnings: 16, 10, 14, 15	
#End Region

Sub Process_Globals
	Private BANano As BANano 'ignore
	Public AppName As String = "firebasedemo"
	Private Version As String = "1.00"
	Public AppTitle As String = "firebasedemo"
	Private Publish As String = "C:\laragon\www"
	Public ServerIP As String = "localhost"
	Public Version As String = "1.00"
	Public Port As String = "8080"
	Private fb As BANanoFireStoreDB
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	' you can change some output params here
	BANano.Initialize("BANano", AppName, DateTime.now)
	BANano.HTML_NAME = "index.html"
	BANano.Header.Title = AppTitle
	'
	'BANano.Header.AddFavicon("favicon-16x16.png", "16x16")
	'BANano.Header.AddAppleTouchIcon("apple-touch-icon.png", "180x180")
	'BANano.Header.AddMSTileIcon("mstile-150x150.png", "144x144")
	'BANano.Header.SetMaskIcon("safari-pinned-tab.svg")
	'BANano.Header.AddManifestIcon("android-chrome-192x192.png", "192x192")
	'BANano.Header.AddManifestIcon("android-chrome-512x512.png", "512x512")
	BANano.TranspilerOptions.UseServiceWorker = False
	BANano.transpileroptions.MergeAllCSSFiles = True
	BANano.transpileroptions.MergeAllJavascriptFiles = True
	BANano.TranspilerOptions.EnableLiveCodeSwapping = False
	BANano.TranspilerOptions.RedirectOutput(File.DirApp, "log.txt")
	'BANano.TranspilerOptions.RemoveDeadCode = True
	'
	'set php settings
	BANano.PHP_NAME = $"${AppName}.php"$
	BANano.PHPHost = $"http://${ServerIP}:${Port}/${AppName}/"$
	BANano.PHPAddHeader("Access-Control-Allow-Origin: *")
		
	BANano.Build(Publish)
	Dim fx As JFX
	Dim URL As String = File.GetUri(File.DirApp,"log.txt")
	fx.ShowExternalDocument(URL)
	'
	Dim appPath As String = $"http://localhost/${AppName}/index.html"$
	If Port <> "" Then appPath = $"http://localhost:${Port}/${AppName}/index.html"$
	fx.ShowExternalDocument(appPath)
	ExitApplication
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

' HERE STARTS YOUR APP
Sub BANano_Ready()
	Log("Initialize firebase...")
	
	fb.Initialize
	'use your own credentials
	
	fb.apiKey = "AIzaSyDBijdfdG3KPx7qd5-jDGrRNr2RRXWS57o"
	fb.authDomain = "fbtests-f9490.firebaseapp.com"
	fb.databaseURL = "https://fbtests-f9490.firebaseio.com"
	fb.projectId = "fbtests-f9490"
	fb.storageBucket = "fbtests-f9490.appspot.com"
	fb.messagingSenderId = "905575318254"
	fb.appId = "1:905575318254:web:fb5c35cdc13288aeb329ff"
	fb.measurementId = "G-41GS0509JY"
	'
	Log("Connect to firebase...")
	fb.connect
	'
	Log("Enable offline storage...")
	Dim ofResponse As Map
	Dim ofError As Map
	Dim offline As BANanoPromise = fb.enablePersistence
	offline.then(ofResponse)
	Log(ofResponse)
	offline.Else(ofError)
	Dim message As String = fb.GetMessage(ofError)
	Log(message)
	offline.End
	'
	'detect changes being made
	fb.onSnapshot("users", Me, "onSnapshot")
	'
	Log("Add a record to the users collection...")
	'[C]reate a new record for the users collection
	Dim user As Map = CreateMap()
	user.put("name", "Anele")
	user.Put("email", "mbanga.usi@gmail.com")
	user.put("phone", "082")
	user.Put("age", 46)
	user.Put("children", 5)
	'
	Dim recID As String
	Dim Response As Map
	Dim Error As Map
	Dim adduser As BANanoPromise = fb.CollectionAdd("users", user)
	adduser.then(Response)
	recID = fb.GetID(Response)
	Log($"Add User ID: ${recID}"$)
	adduser.Else(Error)
	Dim message As String = fb.GetMessage(Error)
	Log(message)
	adduser.End
	'
	'
	'[R]ead all existing records order by 'name asc', you can also pass 'name desc' to sort by name descending
	Log("Read all records in the users collection...")
	Dim allResponse As Map
	Dim allError As Map
	Dim getAllUsers As BANanoPromise = fb.CollectionGetAll("users", "name")
	getAllUsers.Then(allResponse)
	Log("All users")
	Dim recs As List = fb.FromJSON(allResponse)
	Log(recs)
	getAllUsers.Else(allError)
	Dim message As String = fb.GetMessage(allError)
	Log(message)
	getAllUsers.End
	'
	'[R]ead an existing record
	Dim fID As String = "GcL3ZEENx3yhCnUX5a15"
	Log($"Read an existing record from the users collection using '${fID}'..."$)
	Dim gRes As Map
	Dim gError As Map
	Dim getUser As BANanoPromise = fb.CollectionGet("users", fID)
	getUser.then(gRes)
	Dim data As Map = fb.GetRecord(gRes)
	Log($"Read User: ${fID}"$)
	Log(data)
	getUser.Else(gError)
	Dim message As String =fb.GetMessage(gError)
	Log(message)
	getUser.End
	
	'
	'[U]pdate an existing user by id
	Log($"Update an existing record from the users collection using '${fID}'..."$)
	Dim recu As Map = CreateMap()
	recu.Put("city", "East London, Eastern Cape Province, South Africa")
	recu.Put("lastupdated", DateTime.Now)
	recu.Put("name", "Anele Mbanga (Mashy)")
	'
	Dim upResponse As Map
	Dim upError As Map
	Dim upUser As BANanoPromise = fb.CollectionUpdate("users", fID, recu)
	upUser.Then(upResponse)
	Log("User updated successfully")
	upUser.Else(upError)
	Dim message As String = fb.GetMessage(upError)
	Log(message)
	upUser.End
	'
	'
	'[D]elete an existing user by id
'	Log($"Delete an existing record from the users collection using '${fID}'..."$)
'	Dim dResponse As Map
'	Dim dError As Map
'	Dim delUser As BANanoPromise = fb.CollectionDelete("users", fID)
'	delUser.then(dResponse)
'	Log($"User deleted successfully! '${fID}'"$)
'	Log(dResponse)
'	delUser.Else(dError)
'	Dim message As String = fb.GetMessage(dError)
'	Log(message)
'	delUser.End
	
	'[WHERE CLAUSE]
	Dim wResponse As Map
	Dim wError As Map
	Log("select * from users where name = 'Anele'")
	fb.SelectFrom("users")
	fb.WhereCondition("name", fb.FB_EQ, "Anele")
	
	'in clause
	'fb.WhereCondition("email", fb.FB_IN, Array("mbanga.anele@gmail.com", "mbanga.usi@gmail.com"))
	'
	
	Dim wUser As BANanoPromise = fb.Execute
	wUser.then(wResponse)
	Dim recs As List = fb.FromJSON(wResponse)
	Log(recs)
	wUser.Else(wError)
	Dim message As String = fb.GetMessage(wError)
	Log(message)
	wUser.End
	'
'	'register a user (enable authentication)
'	Dim regResponse As Map
'	Dim regError As Map
'	Dim reguser As BANanoPromise = fb.CreateUserWithEmailAndPassword("xxx", "xxx")
'	reguser.Then(regResponse)
'	'
'	'update the display name
'	Dim udnRes As Map
'	Dim udnErr As Map
'	Dim udn As BANanoPromise = fb.UpdateDisplayName(regResponse, "Anele Mbanga")
'	udn.Then(udnRes)
'	Log(udnRes)
'	udn.Else(udnErr)
'	Log(udnErr)
'	udn.End
'	'
'	reguser.Else(regError)
'	Dim message As String = regError.Get("message")
'	Log(message)
'	reguser.End
	'
		'
'	'sign in
'	Dim signRes As Map
'	Dim signErr As Map
'	Dim signUser As BANanoPromise = fb.SignInWithEmailAndPassword("xxx","xxx")
'	signUser.Then(signRes)
'	Log("signed in...")
'	Log(signRes)
'	Dim user As Map = signRes.Get("user")
'	Log(user)
'	signUser.Else(signErr)
'	Dim message As String = signErr.Get("message")
'	Log(message)
'	signUser.End
	
End Sub

Sub onSnapshot(snapShot As Map)
	'get changes when they happen
	Dim changes As List = fb.DocChanges(snapShot)
	For Each item As Map In changes
		'what is the change type
		Dim changetype As String = fb.getChangeType(item)
		Select Case changetype
		Case fb.FB_ADDED
		Case fb.FB_REMOVED
		Case fb.FB_MODIFIED
		End Select
	Next
End Sub