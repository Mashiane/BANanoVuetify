AppType=JavaFX
Build1=Default,b4j.example
File1=android-chrome-192x192.png
File10=keto.jpg
File11=lock.jpg
File12=login.jpg
File13=logo.png
File14=paleo.jpg
File15=register.jpg
File16=sponge.png
File17=upload.php
File18=vegan.jpg
File19=vuejs.png
File2=android-chrome-512x512.png
File3=apple-touch-icon.png
File4=avatar.png
File5=config.php
File6=favicon.ico
File7=favicon-16x16.png
File8=favicon-32x32.png
File9=homeimage.jpg
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=banano
Library4=bananovuetifycore
Library5=bananoelectron
Module1=CompHomeDetails
Module2=CompHomeHero
Module3=CompHomePlans
Module4=pgIndex
Module5=ViewHome
Module6=ViewJoin
Module7=ViewMenu
Module8=ViewSignIn
NumberOfFiles=19
NumberOfLibraries=5
NumberOfModules=8
Version=8.5
@EndOfDesignText@
#Region Project Attributes 
	#MergeLibraries: True
	#LibraryAuthor: Anele Mashy Mbanga
#End Region

#IgnoreWarnings:12, 15
Sub Process_Globals
	Public BANano As BANano 'ignore
	Public AppName As String = "electronmealprep"
	Public AppTitle As String = "BANanoElectron Meal Prep"
	Private Publish As String = "C:\laragon\www"
	Public DebugIP As String = "localhost"
	Public Version As String = "1.0.0"
	Public Port As String = "8080"
	Public ServerIP As String = "localhost"
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	'initialize banano for first use
	BANano.Initialize("BANano", AppName, DateTime.now)
	BANano.HTML_NAME = "index.html"
	BANano.Header.Title = AppTitle
	'BANano.Header.AddFavicon("favicon-16x16.png", "16x16")
	'BANano.Header.AddAppleTouchIcon("apple-touch-icon.png", "180x180")
	'BANano.Header.AddMSTileIcon("mstile-150x150.png", "144x144")
	'BANano.Header.SetMaskIcon("safari-pinned-tab.svg")
	'BANano.Header.AddManifestIcon("android-chrome-192x192.png", "192x192")
	'BANano.Header.AddManifestIcon("android-chrome-512x512.png", "512x512")
	BANano.TranspilerOptions.UseServiceWorker = False
	BANano.TranspilerOptions.MergeAllCSSFiles = True
	BANano.TranspilerOptions.MergeAllJavascriptFiles = True
	BANano.TranspilerOptions.MinifyOnline = False
	BANano.TranspilerOptions.IgnoreB4JLibrary("bananoelectron")
	BANano.TranspilerOptions.IgnoreB4JLibrary("json")
	'add node security
	'BANano.Header.AddMeta($"<meta http-equiv="Content-Security-Policy" content="script-src 'self' 'unsafe-inline';" />"$)
	
	BANano.TranspilerOptions.EnableLiveCodeSwapping = False
	'BANano.TranspilerOptions.RedirectOutput(File.DirApp, "log.txt")
	'set php settings
	BANano.PHP_NAME = $"${AppName}.php"$
	BANano.PHPHost = $"http://${ServerIP}:${Port}/${AppName}/"$
	BANano.PHPAddHeader("Access-Control-Allow-Origin: *")
	BANano.Build(Publish)
	
'	Dim fx As JFX
'	Dim URL As String = File.GetUri(File.DirApp,"log.txt")
'	fx.ShowExternalDocument(URL)
	'
'	Dim appPath As String = $"http://localhost/${AppName}/index.html"$
'	If Port <> "" Then appPath = $"http://localhost:${Port}/${AppName}/index.html"$
'	fx.ShowExternalDocument(appPath)
	
	
	'lets work with electron
	Dim electron As BANanoElectron
	electron.Initialize(Publish, AppName, "com.mashy.electronmealprep", AppTitle)
	electron.version = Version
	electron.description = "Beginning Electron with BANano - Book Demo"
	electron.AddScript("start", "electron main.js")
	electron.AddScript("build", "npm run build-mac && npm run build-win && npm run build-linux")
	'electron.AddScript("build-mac", "electron-packager . --platform=darwin --out=build --icons=icons/Icon.icns --overwrite --asar")
	electron.AddScript("build-win", "electron-packager . --platform=win32 --out=build --icons=icons/Icon.ico --overwrite --asar")
	'electron.AddScript("build-linux", "electron-packager . --platform=linux --out=build --icons=icons/Icon.png --overwrite --asar")
	electron.AddKeyword("Electron")
	electron.AddKeyword("BANano")
	electron.author = "Anele Mbanga (Mashy)"
	electron.license = "MIT"
	electron.Repository = "https://github.com/Mashiane/BANanoElectron"
	'
	'define the main process
	Dim MP As ELProcess = electron.MainProcess
	MP.comment("get access to all Electron API")
	MP.require("electron", "electron")
	MP.comment("module to control the app life cycle")
	MP.dimension("app", "electron.app")
	MP.comment("module for the menu")
	MP.dimension("Menu", "electron.Menu")
	MP.comment("module to create native browser window")
	MP.dimension("BrowserWindow", "electron.BrowserWindow")
	MP.require("path", "path")
	MP.require("url", "url")
	MP.newline
	'
	MP.comment("global reference to window")
	MP.let("mainWindow", "null")
	MP.newline
	'
	MP.OpenFunction("createWindow")
	MP.comment("create the browser window")
	'
	'set window options
	'https://www.electronjs.org/docs/api/browser-window#class-browserwindow
	Dim wo As Map = CreateMap()
	'wo.Put("width", 800)
	'wo.Put("height", 600)
	wo.Put("show", False)
	'wo.Put("backgroundColor", "#FFF")
	'wo.Put("resizable", True)
	'wo.Put("movable", True)
	'wo.Put("alwaysOnTop", False)
	'wo.Put("frame", False)
	'wo.Put("titleBarStyle", "hidden")
	'wo.Put("transparent", True)
	wo.Put("icon", "./assets/logo.png")
	'set the web preferences
	Dim webPreferences As Map = CreateMap()
	webPreferences.Put("devTools",True)
	webPreferences.Put("nodeIntegration", False)
	webPreferences.Put("worldSafeExecuteJavaScript", True)
	wo.Put("webPreferences", webPreferences)
	'
	MP.newBrowserWindow("mainWindow", wo)
	MP.removeMenu("mainWindow")
	MP.maximise("mainWindow")
	MP.loadHTML("mainWindow", "index.html")
	MP.openDevTools("mainWindow")
	'
	MP.onceReadyToShow("mainWindow")
	MP.show("mainWindow")
	MP.Done
	'
	MP.onClosed("mainWindow")
	MP.nullify("mainWindow")
	MP.Done
	
	MP.CloseFunction  'for OpenFunction
	'
	MP.comment("create a menu")
	Dim editapp As ELMenu = MP.newMenu("editapp", "Edit App")
	MP.newMenu("undo", "Undo").SetAccelerator("CmdOrCtrl+Z").SetRole("undo").Pop(editapp)
	MP.newMenu("redo", "Redo").SetAccelerator("Shift+CmdOrCtrl+Z").SetRole("redo").Pop(editapp)
	MP.newMenuSeparator.Pop(editapp)
	MP.newMenu("cut", "Cut").SetAccelerator("CmdOrCtrl+X").SetRole("cut").Pop(editapp)
	MP.newMenu("copy", "Copy").SetAccelerator("CmdOrCtrl+C").SetRole("copy").Pop(editapp)
	MP.newMenu("paste", "Paste").SetAccelerator("CmdOrCtrl+V").SetRole("paste").Pop(editapp)
	MP.newMenu("selectall", "Select All").SetAccelerator("CmdOrCtrl+A").SetRole("selectall").Pop(editapp)
	MP.newMenuSeparator.Pop(editapp)
	MP.newMenu("quit", "Quit").SetRole("quit").Pop(editapp)
	
	Dim menu1 As ELMenu = MP.newMenu("menu1", "Menu 1")
	MP.newMenu("menu1item1", "Menu 1 Item 1").Pop(menu1)
	MP.newMenu("menu1item2", "Menu 1 Item 2").SetChecked(True).SetCheckBox.Pop(menu1)
	MP.newMenu("menu1item3", "Menu 1 Item 3").SetChecked(False).SetRadio.Pop(menu1)
	
	Dim menu2 As ELMenu = MP.newMenu("menu2", "Menu 2")
	MP.newMenu("menu2item1", "Menu 2 Item 1").Pop(menu2)
	MP.newMenu("menu2item2", "Menu 2 Item 2").Pop(menu2)
	'
	Dim template As ELMenu = MP.newMenu("","").AddMenu(editapp).AddMenu(menu1).AddMenu(menu2)
	'convert to json
	Dim templateJSON As String = template.ToTemplate
	'MP.let("template", templateJSON)
	MP.newline
	'
	MP.appOnReady("app")
	'MP.MenuBuildFromTemplate("appmenu", "Menu", "template")
	'MP.MenuSetApplicationMenu("appmenu", "Menu")
	MP.RunFunction("createWindow")
	MP.Done
	'
	MP.appOnWindowAllClosed("app")
	MP.ifPlatformNotDarwin
	MP.appquit("app")
	MP.EndIf
	MP.Done
	'
	MP.appOnActivate("app")
	MP.comment("On OS X it's common to re-create a window in the app when the")
	MP.comment("dock icon is clicked and there are no other windows open.")
	MP.IfIsNull("mainWindow")
	'MP.MenuBuildFromTemplate("appmenu", "Menu", "template")
	'MP.MenuSetApplicationMenu("appmenu", "Menu")
	MP.RunFunction("createWindow")
	MP.Endif
	MP.Done
	
'	'creating a context menu in the render process
'	'define the renderer process
'	Dim RP As ELProcess = electron.RendererProcess
'	'RP.comment("get the IPC")
'	'RP.constant("ipc", "require('electron').ipcRenderer")
'	'get the button
'	RP.comment("get the button")
'	RP.getElementById("syncmsgbtn", "sendsyncmsgbtn")
'	RP.comment("add event listener")
'	RP.addEventListener("syncmsgbtn", "click")
'	RP.script("alert('Me')")
'	RP.Done
	
	'create package, create main
	electron.Save
	
	Log("=======================================")
	Log(">> Checking if Electron is already installed...")
	Dim rs As ResumableSub = electron.isInstalled
	Wait For (rs) Complete(Result As Boolean)
	If Not(Result) Then
		Log(">> Electron is not yet installed. Installing...")
		Dim rs As ResumableSub = electron.Install
		Wait For (rs) Complete(Result As Boolean)
		If Not(Result) Then ExitApplication
	Else
		Log(">> Electron is installed!")
	End If
		
	'install package
	Log(">> Attempting to install electron-packager for app...")
	Dim rs As ResumableSub = electron.InstallDevDependency("electron-packager")
	Wait For (rs) Complete(Result As Boolean)
	If Not(Result) Then
		Log(">> Could not install electron packager locally...")
		If Not(Result) Then ExitApplication
	Else
		Log(">> Electron packager installed locally...!")
	End If
	
	Log(">> Attempting to install electron for app...")
	Dim rs As ResumableSub = electron.InstallDevDependency("electron")
	Wait For (rs) Complete(Result As Boolean)
	If Not(Result) Then
		Log(">> Could not install electron locally...")
		If Not(Result) Then ExitApplication
	Else
		Log(">> Electron installed locally...!")
	End If
	
	Log(">> Attempting to install the application...")
	Dim rs As ResumableSub = electron.AppInstall
	Wait For (rs) Complete(Result As Boolean)
	If Not(Result) Then
		Log(">> Could not install the Electron App...")
		If Not(Result) Then ExitApplication
	Else
		Log(">> Electron App installed, check the output!")
	End If
	
	Log(">> Attempting to build the windows application...")
	Dim rs As ResumableSub = electron.AppBuildWin
	Wait For (rs) Complete(Result As Boolean)
	If Not(Result) Then
		Log(">> Could not build the Electron App...")
		If Not(Result) Then ExitApplication
	Else
		Log(">> Electron App built...!")
	End If
	'
	Log(">> Attempting to start the application...")
	Dim rs As ResumableSub = electron.AppStart
	Wait For (rs) Complete(Result As Boolean)
	If Not(Result) Then
		Log(">> Could not start the Electron App...")
		If Not(Result) Then ExitApplication
	Else
		Log(">> Electron App started, check the output!")
	End If
	
	#if release
	ExitApplication
	#end if
	
	
	
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub BANano_Ready
	pgIndex.Init
End Sub

