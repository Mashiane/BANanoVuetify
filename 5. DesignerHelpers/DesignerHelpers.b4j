AppType=JavaFX
Build1=Default,b4j.example
Group=Default Group
Library1=jcore
Library2=jfx
Library3=javaobject
Module1=modCodeProfile
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=1
Version=8.1
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	'
	Dim fPath As String = "C:\Users\anelembanga\Documents\MEGA\MyApps\b4j\workspace\BANanoVuetify\2. Library"
	modCodeProfile.RedirectOutput(File.DirApp, "log.txt")
	modCodeProfile.Profile(fPath, "VMMenu.bas")
	'
	BuildPropertyBag("Menu", modCodeProfile.SubRoutines)
	'build the property bag
	
	modCodeProfile.OpenLog(File.DirApp, "log.txt")
	ExitApplication
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub


Sub BuildPropertyBag(sprefix As String, subs As Map)
	Dim sit As String = sprefix.tolowercase
	Dim sbl As StringBuilder
	Dim stext As StringBuilder
	stext.Initialize 
	Dim sbool As StringBuilder
	sbool.Initialize
	Dim tlist As List
	tlist.Initialize 
	Dim blist As List
	blist.Initialize
	' 
	sbl.Initialize 
	sbl.Append($"#Region ${sprefix}"$).Append(CRLF)
	sbl.Append($"Sub PropertyBag_${sprefix}"$).Append(CRLF)
	sbl.Append($"vm.setdata("pb${sit}", False)"$).Append(CRLF)
	sbl.Append($"pb${sit} = vm.CreateProperty("ppb${sit}", Me)"$).Append(CRLF)
	sbl.Append($"pb${sit}.SetVShow("pb${sit}")"$).Append(CRLF)
	sbl.Append($"pb${sit}.AddHeading("d","Details")
	pb${sit}.AddText("d","id","ID","","")
	pb${sit}.AddText("d", "controltype", "Type", "","${sit}")
	pb${sit}.AddText("d","vmodel","ID","","")"$).Append(CRLF)
	'
	For Each k As String In subs.Keys
		'get the details of the sub
		Dim subdata As TypeSub = subs.Get(k)
		'
		Dim SubName As String = subdata.SubName 
		Dim CanUse As Boolean = subdata.CanUse
		Dim TotalArguements As Int = subdata.TotalArguements
		Dim ArguementNames As List = subdata.ArguementNames
		Dim ArguementTypes As List = subdata.ArguementTypes
		'
		If SubName.StartsWith("set") Or SubName.StartsWith("Set") Then
			If SubName.EqualsIgnoreCase("setstatic") Then Continue
			If SubName.EqualsIgnoreCase("setdesignmode") Then Continue
			If SubName.EqualsIgnoreCase("setvalue") Then Continue
			If SubName.EqualsIgnoreCase("setattrloose") Then Continue
			If SubName.EqualsIgnoreCase("setmarginall") Then Continue
			If SubName.EqualsIgnoreCase("setpaddingall") Then Continue
			If SubName.EqualsIgnoreCase("setvmodel") Then Continue
			If SubName.EqualsIgnoreCase("SetAttrSingle") Then Continue
			If SubName.EqualsIgnoreCase("SetDeviceOffsets") Then Continue
			If SubName.EqualsIgnoreCase("SetDevicePositions") Then Continue
			If SubName.EqualsIgnoreCase("SetDeviceSizes") Then Continue
			If SubName.EqualsIgnoreCase("SetName") Then Continue
			If SubName.EqualsIgnoreCase("SetRC") Then Continue
			If SubName.EqualsIgnoreCase("SetStyleSingle") Then Continue
				
		
			Dim ssub As String = modCodeProfile.StrMid(SubName, 4)
			Dim ssub1 As String = ssub.tolowercase
					
			Select Case TotalArguements
			Case 1
				Dim stype As String = ArguementTypes.Get(0)
				Select Case stype
				Case "boolean"
					sbool.Append($"pb${sit}.AddCheck2(1, 1, "is${ssub1}", "${ssub}")"$).Append(CRLF)
					blist.Add(ssub1)
				Case "string"	
					stext.Append($"pb${sit}.AddText("d","${ssub1}","${ssub}","","")"$).Append(CRLF)
					tlist.Add(ssub1)
				End Select
			Case Else
				Log(SubName)
				Log(ArguementNames)
				Log(ArguementTypes)
			End Select
		End If
	Next
	sbl.Append(stext.ToString)
	sbl.Append(sbool.ToString)
	sbl.Append($"pb${sit}.SetChecks("d")
	pb${sit}.AddMatrix("d")
	pb${sit}.AddButton("d", "btnSave${sprefix}", "Save", "savePropertyBag")
	pb${sit}.AddButton("d", "btnDelete${sprefix}", "Delete", "deletePropertyBag")
	vm.container.AddComponent(1, 3, pb${sit}.tostring)"$).Append(CRLF)
	sbl.Append("End Sub").Append(CRLF)
	sbl.Append($"#End Region"$).Append(CRLF)
	'
	Dim s As String = BuildStrings(sit, tlist)
	Dim b As String = BuildBooleans(sit, blist)
	sbl.Append(s)
	sbl.Append(b)
	
	Log(sbl.ToString)
End Sub

Sub BuildStrings(sprefix As String, sText As List) As String
	Dim sbl As StringBuilder
	sbl.initialize
	For Each v As String In sText
		sbl.Append($"Private s${v} As String"$).append(CRLF)
	Next
	sbl.Append(CRLF)
	'read details
	For Each v As String In sText
		sbl.append($"s${v} = mattr.getdefault("${v}", "")"$).append(CRLF)
	Next
	sbl.append(CRLF)
	'assign to component
	For Each v As String In sText
		sbl.append($"${sprefix}.Set${v}(s${v})"$).append(CRLF)
	Next
	'build the source code
	sbl.append(CRLF)
	For Each v As String In sText
		sbl.append($"CodeLine(sb, s${v}, "s", "${sprefix}", sname, "Set${v}")"$).append(CRLF)
	Next
	sbl.append(CRLF)
	Return sbl.ToString
End Sub

Sub BuildBooleans(sprefix As String, bText As List) As String
	Dim sbl As StringBuilder
	sbl.initialize
	For Each v As String In bText
		sbl.Append($"Private bis${v} As Boolean"$).append(CRLF)
	Next
	sbl.Append(CRLF)
	'read details
	For Each v As String In bText
		sbl.append($"bis${v} = YesNoToBoolean(mattr.getdefault("is${v}", "No"))"$).append(CRLF)
	Next
	sbl.append(CRLF)
	'assign to component
	For Each v As String In bText
		sbl.append($"${sprefix}.Set${v}(bis${v})"$).append(CRLF)
	Next
	'build the source code
	sbl.append(CRLF)
	For Each v As String In bText
		sbl.append($"CodeLine(sb, bis${v}, "b", "${sprefix}", sname, "Set${v}")"$).append(CRLF)
	Next
	sbl.append(CRLF)
	Return sbl.ToString
End Sub
